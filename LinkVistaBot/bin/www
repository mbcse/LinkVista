#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var http = require('http');

const net = require('net');
const { killPortProcess } = require('kill-port-process');
const { sendSlackMessage } = require('../listners/slackBot');

function isPortInUse(port) {
  return new Promise((resolve, reject) => {
    const server = net.createServer();

    server.once('error', (err) => {
      if (err.code === 'EADDRINUSE') {
        resolve(true); // Port is in use
      } else {
        reject(err);
      }
    });

    server.once('listening', () => {
      server.close();
      resolve(false); // Port is not in use
    });

    
  });
}

async function killProcessUsingPort(port) {
  const isPortUsed = await isPortInUse(port);
  console.log(isPortUsed)
  if (isPortUsed) {
    await killPortProcess(port);
    console.log(`Process using port ${port} has been terminated.`);
  } else {
    console.log(`Port ${port} is not in use.`);
  }
}


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


// killProcessUsingPort(port).then(()=>{
  
  
// }).catch((err) => {
//   console.log(err)
// });


/**
   * Normalize a port into a number, string, or false.
   */
  
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

async function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      // await sendSlackMessage("txslackbot", "Tx Listener Bot Start Failed because of EADDRINUSE error on "+ bind)
      process.exit(1);
      break;
    default:
      throw error;
  }

  
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
  // sendSlackMessage("txslackbot", "Tx Listener Bot Started at " + bind)

process.on('SIGTERM', async signal => {
    console.log(`Process ${process.pid} received a SIGTERM signal`)
    // await sendSlackMessage("txslackbot", "Tx Listener Bot Stopped using SIGTERM signal")
    process.exit(0)
  })
  
process.on('SIGINT', async signal => {
    console.log(`Process ${process.pid} has been interrupted`)
    // await sendSlackMessage("txslackbot", "Tx Listener Bot Stopped using SIGINT signal")
    process.exit(0)
})

}
